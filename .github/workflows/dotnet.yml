name: Build and deploy ASP.Net Core app to Azure Web App - weatherman

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: weatherMan    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'   # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '3.1.301'
  TERRAFORM_VERSION: 1.0.11
  TERRAFORM_WORKING_DIR: './Infrastructure'
  ENVIRONEMNT: 'dev'

jobs:
  build:
    runs-on: windows-latest
    outputs: 
      Version: ${{ steps.gitversion.outputs.nuGetVersionV2 }} 
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}   
    steps:
      - uses: actions/checkout@v2
        with: # From: https://samlearnsazure.blog/2020/12/18/revisiting-versioning-with-github/
          fetch-depth: 0 #fetch-depth is needed for GitVersion

       # install and calculate the new version with GitVersion  
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'
      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.7
        id: gitversion # step id used as reference for output values
        with:
          useConfigFile: true           
          configFilePath: './versions/GitVersion.yml'
      - name: Display GitVersion outputs
        run: |
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"   
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          include-prerelease: false

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/weatherman -p:Version=${{ steps.gitversion.outputs.nuGetVersionV2 }}

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: weathermanappArtifacts
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/weatherman
  
  security:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          include-prerelease: false

      - name: Restore the app
        run: dotnet build --configuration Debug

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif --file=BradyWeather.sln
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: snyk.sarif
          
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: security
    environment: 'production'
    outputs:
      apikeykvref: ${{ steps.fetch-api-key.outputs.apikeyref }}
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2    

    - name: 'Terraform Format'
      uses: hashicorp/terraform-github-actions@master
      with:
         tf_actions_version: ${{ env.TERRAFORM_VERSION }}
         tf_actions_subcommand: 'fmt'
         tf_actions_working_dir: ${{ env.TERRAFORM_WORKING_DIR }}
    
    - name: 'Terraform Init'
      uses: hashicorp/terraform-github-actions@master
      with:
         tf_actions_version: ${{ env.TERRAFORM_VERSION }}
         tf_actions_subcommand: 'init'
         tf_actions_working_dir: ${{ env.TERRAFORM_WORKING_DIR }}
      env:
        TF_VAR_environment: ${{ env.ENVIRONEMNT }}
        TF_VAR_weatherApiKey: ${{ secrets.WEATHER_API_KEY }}
    
    - name: 'Terraform Validate'
      uses: hashicorp/terraform-github-actions@master
      with:
         tf_actions_version: ${{ env.TERRAFORM_VERSION }}
         tf_actions_subcommand: 'validate'
         tf_actions_working_dir: ${{ env.TERRAFORM_WORKING_DIR }}
      env:
        TF_VAR_environment: ${{ env.ENVIRONEMNT }}
        TF_VAR_weatherApiKey: ${{ secrets.WEATHER_API_KEY }}
        
    
    - name: 'Terraform plan'
      uses: hashicorp/terraform-github-actions@master
      with:
         tf_actions_version: ${{ env.TERRAFORM_VERSION }}
         tf_actions_subcommand: 'plan'
         tf_actions_working_dir: ${{ env.TERRAFORM_WORKING_DIR }}
      env:
        TF_VAR_environment: ${{ env.ENVIRONEMNT }}
        TF_VAR_weatherApiKey: ${{ secrets.WEATHER_API_KEY }}

    - name: 'Terraform Apply'
      # if: github.ref == 'refs/head/main'
      uses: hashicorp/terraform-github-actions@master
      with:
         tf_actions_version: ${{ env.TERRAFORM_VERSION }}
         tf_actions_subcommand: 'apply'
         tf_actions_working_dir: ${{ env.TERRAFORM_WORKING_DIR }}
      env:
        TF_VAR_environment: ${{ env.ENVIRONEMNT }}
        TF_VAR_weatherApiKey: ${{ secrets.WEATHER_API_KEY }}
    
    - name: 'Terraform Output'
      id: terraform
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.TERRAFORM_VERSION }}
        tf_actions_subcommand: 'output'
        tf_actions_working_dir: ${{ env.TERRAFORM_WORKING_DIR }}
    # - name: 'Use Terraform Output'
    #   run: |
    #     echo ${{ steps.terraform.outputs.tf_actions_output  }}
    #     # apt-get install jq
    #     # echo "${{ fromJson(steps.tf_actions_output.kvsecretapikey).value }}"
    #     # echo echo ${{ steps.terraform.outputs.tf_actions_output }} | jq -r '.kvsecretapikey.value'
    #     # APIKEY=$(echo ${{ steps.terraform.outputs.tf_actions_output }} | jq -r '.kvsecretapikey.value')
    #     # TODO: Read the tf output and set the env variable so other jobs can use it.
    #     # echo "::set-output name=apikeyref:@Microsoft.KeyVault(SecretUri=https://kv-weatherman.vault.azure.net/secrets/weatherApiKey)"

    # - name: 'Get API KeyVault Reference from outputs'
    #   id: fetch-api-key
    #   run: |
    #     apt-get install jq
    #     echo echo ${{ steps.terraform.outputs.tf_actions_output }} | jq -r '.kvsecretapikey.value'
    #     echo echo ${{ steps.terraform.outputs.tf_actions_output }} | jq -r '.kvsecretapikey.value' >> $APIKEY
    #     # APIKEY=$(`echo ${{ steps.terraform.outputs.tf_actions_output }} | jq -r '.kvsecretapikey.value'`)
    #     echo $APIKEY
    #     echo "::set-output name=apikeyref:$APIKEY"
      
  deploy:
    runs-on: windows-latest
    needs: [ build, terraform ]
    environment:
      name: '${{ env.ENVIRONEMNT }}'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    # Only deploy if running off the main branch 
    if: github.ref == 'refs/heads/main'

    steps:
        
      # - name: Get Weather APIKEY Reference
      #   run: echo ${{ needs.terraform.outputs.apikeykvref }}
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: weathermanappArtifacts
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/weatherman
      
      # Remove Appsettings.json files as we are using kv and tf to provision settings from appservice settings
      - name: 'Remove Appsettings.json files'
        run: |
          ls ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/weatherman/
          rm  ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/weatherman/appsettings*.json
      # This doesnt work as the kv reference in appsettings.json doesnt resolve to secrets
      # - name: App Settings Variable Substitution
      #   uses: microsoft/variable-substitution@v1
      #   with:
      #     files: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/weatherman/appsettings.json, ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/weatherman/appsettings.development.json'
      #   env:
      #     Web:WeatherApi.ApiKey: '@Microsoft.KeyVault(SecretUri=https://kv-weatherman.vault.azure.net/secrets/weatherApiKey)'
      - name: Display GitVersion outputs
        run: |
          echo "Version: ${{ needs.build.outputs.Version }}" 
          echo "CommitsSinceVersionSource: ${{ needs.build.outputs.CommitsSinceVersionSource }}" 
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only create a release if there has been a commit change
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ needs.build.outputs.Version }}
          release_name: Release ${{ needs.build.outputs.Version }}  

      - name: Use Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: '${{ env.ENVIRONEMNT }}-${{ env.AZURE_WEBAPP_NAME }}'
          slot-name: 'production'
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/weatherman
      
      - name: Azure logout
        run: |
          az logout

      # Below not needed if we are using github runner
      # - name: Azure CLI script
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: 2.0.72
      #     inlineScript: |
      #       az logout
      #       az cache purge
      #       az account clear
